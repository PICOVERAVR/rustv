use rustv::{State, run};

#[test]
fn jal() {
    let iv = vec![
        0x93, 0x0f, 0xa0, 0x0a, // addi x31, x0, 0xaa
        0x13, 0x0f, 0xb0, 0x0a, // addi x30, x0, 0xab
        0xb3, 0x20, 0xff, 0x01, // slt x1, x30, x31
        0x63, 0x86, 0x00, 0x00, // beq x1, x0, <true>
        0x00, 0x00, 0x00, 0x00, // <skip>
        0x00, 0x00, 0x00, 0x00, // <skip>
        0x17, 0x02, 0x00, 0x00, // true: auipc x4, 0x0
        0x13, 0x02, 0x02, 0x00, // addi x4 ,x4, 0
        0x6f, 0x01, 0xc0, 0x00, // jal x2, <end>
        0x00, 0x00, 0x00, 0x00, // <skip>
        0x00, 0x00, 0x00, 0x00, // <skip>
        0x93, 0x01, 0x10, 0x00, // end: addi x3, x0, 1
    ];

    let s = State::new(0);

    let new_s = run(iv, s, &mut vec![]);
    let regs = new_s.gprs();

    assert_eq!(regs[0], 0);
    assert_eq!(regs[1], 0);
    assert_eq!(regs[2], 36);
    assert_eq!(regs[3], 1);
    assert_eq!(regs[4], 24);
    assert_eq!(regs[30], 0xab);
    assert_eq!(regs[31], 0xaa);
    assert_eq!(new_s.pc(), 48);
}